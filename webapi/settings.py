"""
Django settings for webapi project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys
from configparser import ConfigParser

config = ConfigParser()
config.read('conf/config.ini')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import random

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

def ranstr(num):
    H = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()`-{}|:?><>?'
    salt = ''
    for i in range(num):
        salt += random.choice(H)
    return salt


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ranstr(50)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("debug", 'false') == 'true'
# DEBUG = True
ALLOWED_HOSTS = ['*']
WH_GROUP_NAME = "wh"
COMPANY_GROUP_NAME = "company"
WH_GROUP_PASSWORD = "secnium-auth-fire"
COMPANY_ADMIN_GROUP_NAME = "company_admin"

# Application definition
# token过期天数
TOKEN_EXP_DAY = 14

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_crontab',
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    'corsheaders',
    'captcha',
    'iast',
    'scaapi',
]

REST_FRAMEWORK = {
    'PAGE_SIZE': 20,
    'DEFAULT_PAGINATION_CLASS': ['django.core.paginator'],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_THROTTLE_CLASSES': (
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ),
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/min',
        'user': '1000/min'
    },
}

basedir = os.path.dirname(os.path.realpath(__file__))
costcontrol_crontab = os.path.join(basedir, "costcontrol_crontab.log")

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'xff.middleware.XForwardedForMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

XFF_TRUSTED_PROXY_DEPTH = 5
# XFF_REQUIRE_HEADER = True
# XFF_ALWAYS_PROXY = True

# cstf token相关配置
CSRF_COOKIE_NAME = "DTCsrfToken"
#CSRF_COOKIE_DOMAIN = "iast.huoxian.cn"
CSRF_HEADER_NAME = "HTTP_CSRF_TOKEN"
AGENT_UPGRADE_URL = "https://www.huoxian.cn"

# cors相关配置
CORS_ORIGIN_REGEX_WHITELIST = [
    r"^https?://\w+\.secnium\.xyz(\:\d+)?$",
    r"^https?://\w+\.secnium\.cn(\:\d+)?$",
    r"^https?://\w+\.huoxian\.club(\:\d+)?$",
    r"^https?://\w+\.huoxian\.cn(\:\d+)?$"
]

CORS_ALLOW_CREDENTIALS = True  # 指明在跨域访问中，后端是否支持对cookie的操作。
CORS_ALLOW_METHODS = [
    'GET',
    'OPTIONS',
    'POST',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'referer',
    'x-token',
    'user-agent',
    'x-csrftoken',
    'csrf-token',
    'x-requested-with',
]

# captcha相关配置
CAPTCHA_IMAGE_SIZE = (80, 36)  # 设置 captcha 图片大小
CAPTCHA_LENGTH = 6  # 字符个数
CAPTCHA_TIMEOUT = 1  # 超时(minutes)

ROOT_URLCONF = 'webapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'webapi.wsgi.application'

if len(sys.argv) > 1 and sys.argv[1] == 'test':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'OPTIONS': {'charset': 'utf8mb4'},
            'USER': config.get("mysql", 'user'),
            'NAME': config.get("mysql", 'name'),
            'PASSWORD': config.get("mysql", 'password'),
            'HOST': config.get("mysql", 'host'),
            'PORT': config.get("mysql", 'port'),
        }
    }

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 6,
        }
    },
]
AUTH_USER_MODEL = 'iast.User'

LANGUAGE_CODE = 'zh-cn'

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_L10N = True

STATIC_URL = '/static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'iast', 'upload')
MEDIA_URL = "/upload/masterimg/"

# 字母验证码
CAPTCHA_IMAGE_SIZE = (80, 45)  # 设置 captcha 图片大小
CAPTCHA_LENGTH = 4  # 字符个数
CAPTCHA_TIMEOUT = 1  # 超时(minutes)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'lingzhi.webapi': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/apiserver.log',
            'backupCount': 5,
            'maxBytes': 1024 * 1024 * 10,
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'lingzhi.webapi': {
            'handlers': ['console', 'lingzhi.webapi'],
            'propagate': True,
            'level': 'INFO',
        },
    }
}

REST_PROXY = {
    'HOST': config.get("engine", 'url'),
}

AGENT_SERVER_PROXY = {
    'HOST': config.get("apiserver", 'url'),
}
